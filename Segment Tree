#include<bits/stdc++.h>
using namespace std;
int a[1000],seg[4000]={0};


//slow:segment-low ,shigh:segment-high ,
void tree(int slow,int shigh,int i)
{
    if(slow==shigh)
    {
        seg[i]=a[shigh];
        return ;
    }
    int mid=(shigh+slow)/2;

    tree(slow,mid,2*i+1);
    tree(mid+1,shigh,2*i+2);
    seg[i]=seg[2*i+1]+seg[2*i+2];
}

// qlow:query-low ,qhigh:query-high
int sum(int slow, int shigh, int qlow, int qhigh, int i)
{
    if (qlow<= slow && qhigh >= shigh)
        return seg[i];
    if ( slow>qhigh||qlow>shigh)
        return 0;
    int mid = (slow+shigh)/2;
    return (sum( slow, mid, qlow, qhigh, 2*i+1) + sum( mid+1, shigh, qlow,qhigh, 2*i+2));
}

void update(int slow,int shigh,int pos,int diff,int i)
{
    if(pos<slow or pos>shigh) return;
    seg[i]+=diff;
    if(slow!=shigh)
    {
        int mid=(slow+shigh)/2;
        update(slow,mid,pos,diff,2*i+1);
        update(mid+1,shigh,pos,diff,2*i+2);
    }
}

int main()
{
  int n;
  cin >> n;
  for(int i=0;i<n;i++)
  {
      cin >>a[i];
  }

  tree(0,n-1,0);
  cout << sum(0,n-1,2,3,0)<<endl;
  int d=1;
  update(0,n-1,2,-d,0);
   cout << sum(0,n-1,2,3,0);
}
